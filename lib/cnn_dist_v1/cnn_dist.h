
extern "C" {
#include <cblas.h>
};

struct cnn_dist_v1 {
	const static int latency = 504;
	const static int MAX_L = MAX_BUFFER + latency;
	// About 1.4e-05*(MAX_BUFFER+504) MB of buffer
	float x_even[7][MAX_L];
	float x_odd [7][MAX_L];

	void operator()(float* x, float* y, int L) {

		// Ensure we don't segfault
		L = L > MAX_L ? MAX_L : L;

		for (int i = 0; i < L; i++) {
			x_odd[0][i] = x[i];
		}

		// auto-generated code for layer layer_0: Conv1d(1, 7, kernel_size=(2,), stride=(1,), dilation=(8,))
		const float w_layer_0[2][7][1] = {{{1.2790634632110596},{0.461356520652771},{0.0607425831258297},{-0.6255712509155273},{-0.029523765668272972},{0.8980883955955505},{0.035610150545835495}},{{-0.3874702453613281},{0.16271838545799255},{-0.5998538136482239},{-0.34493324160575867},{0.2708263397216797},{-0.28371188044548035},{-0.1894647777080536}}};
		const float b_layer_0[7] = {0.501849353313446,0.23849044740200043,0.7723001837730408,0.9691385626792908,0.5871750712394714,0.3724624812602997,-0.4535079300403595};

		// Fill with biases for layer_0
		for (int i = 0; i < 7; i++) {
			for (int l = 8; l < L; l++) {
				x_even[i][l] = b_layer_0[i];
			}
		}

		// Apply main filter for layer_0
		// x_even[:,8:] = sum(w[k]@x_odd[:,8-(1-k)*8:L-(1-k)*8] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*8;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 7, L-8, 1, 1.0, &w_layer_0[k][0][0], 1, &x_odd[0][8-offset], MAX_L, 1.0, &x_even[0][8], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 7; i++) {
			for (int l = 8; l < L; l++) {
				x_even[i][l] = x_even[i][l] > 0 ? x_even[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_1: Conv1d(7, 7, kernel_size=(2,), stride=(1,), dilation=(16,))
		const float w_layer_1[2][7][7] = {{{-0.03567282110452652,0.0032920753583312035,-0.15771126747131348,-0.11137988418340683,0.11906559020280838,-0.23795033991336823,-0.17069333791732788},{-0.05618029460310936,0.015345907770097256,-0.20251421630382538,-0.008301686495542526,0.05531174689531326,0.06755625456571579,-0.22667744755744934},{0.34032726287841797,-0.35880130529403687,0.3277754485607147,0.07812896370887756,0.3115433156490326,-0.06094396859407425,0.02945517934858799},{-0.3351171016693115,-0.3818807005882263,0.23557917773723602,0.6715695858001709,0.33923864364624023,-0.989311158657074,0.20363014936447144},{0.14127440750598907,0.0034476416185498238,0.029043016955256462,-0.10516978055238724,-0.0709414854645729,0.10484133660793304,-0.21197687089443207},{0.05426016077399254,-0.08480272442102432,-0.09053240716457367,-0.07713165134191513,-0.10780609399080276,0.07941038906574249,0.07591060549020767},{0.1541835069656372,-0.01303242240101099,-0.246783047914505,0.13691748678684235,-0.2247062772512436,-0.16921323537826538,-0.10859748721122742}},{{0.1585959643125534,-0.09889961034059525,-0.14665812253952026,-0.023036785423755646,-0.03780033811926842,-0.1637192666530609,0.04448771849274635},{-0.007956191897392273,-0.1564890295267105,-0.21687400341033936,-0.13346591591835022,0.0006153673166409135,-0.0422937385737896,0.18427307903766632},{-0.4722495377063751,-0.3465639054775238,-0.08993835002183914,0.6600469946861267,0.3475193977355957,-0.4429686963558197,0.1864030361175537},{0.1771744191646576,-0.018796740099787712,0.021173497661948204,0.3462534546852112,0.5719162225723267,-0.0024608662351965904,0.11109773814678192},{-0.2047947198152542,0.13308404386043549,-0.07536595314741135,-0.1976103037595749,-0.07409007102251053,-0.06746245175600052,-0.06830918043851852},{-0.23022182285785675,0.13809342682361603,-0.13640426099300385,-0.133192777633667,-0.13773147761821747,0.04115762189030647,0.16606254875659943},{0.17045070230960846,-0.02389529161155224,0.11839286237955093,-0.1409519761800766,-0.18192274868488312,-0.10000460594892502,0.1978088617324829}}};
		const float b_layer_1[7] = {0.12033407390117645,-0.10998371243476868,0.37738972902297974,0.23792366683483124,-0.14433681964874268,-0.13636423647403717,-0.12434667348861694};

		// Fill with biases for layer_1
		for (int i = 0; i < 7; i++) {
			for (int l = 24; l < L; l++) {
				x_odd[i][l] = b_layer_1[i];
			}
		}

		// Apply main filter for layer_1
		// x_odd[:,24:] = sum(w[k]@x_even[:,24-(1-k)*16:L-(1-k)*16] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*16;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 7, L-24, 7, 1.0, &w_layer_1[k][0][0], 7, &x_even[0][24-offset], MAX_L, 1.0, &x_odd[0][24], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 7; i++) {
			for (int l = 24; l < L; l++) {
				x_odd[i][l] = x_odd[i][l] > 0 ? x_odd[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_2: Conv1d(7, 7, kernel_size=(2,), stride=(1,), dilation=(32,))
		const float w_layer_2[2][7][7] = {{{-0.21538272500038147,-0.16045036911964417,-0.07428459078073502,0.09933986514806747,0.18207362294197083,0.061573684215545654,-0.17017924785614014},{-0.1866675615310669,0.033064428716897964,-0.43184834718704224,-0.5371158719062805,0.26640135049819946,-0.22477413713932037,-0.15483784675598145},{0.026653140783309937,0.13606876134872437,-0.16377821564674377,-0.13013386726379395,0.20787568390369415,0.13614022731781006,0.002578939311206341},{-0.15340997278690338,-0.07394926249980927,0.23649398982524872,0.6869922876358032,0.010200649499893188,-0.14402364194393158,-0.07913412153720856},{0.09638627618551254,-0.11876299232244492,0.21486882865428925,-0.3303798735141754,-0.21737626194953918,0.010328616946935654,0.13344578444957733},{-0.1011563315987587,0.10984718054533005,-0.11211708188056946,-0.2544337213039398,-0.018545610830187798,-0.2069939374923706,0.243520125746727},{-0.014048192650079727,0.1368553191423416,-0.1462315022945404,0.346394419670105,0.14561499655246735,-0.13948416709899902,0.12127988785505295}},{{-0.22136202454566956,0.18395324051380157,0.34675922989845276,-0.18743273615837097,-0.14030572772026062,0.18867112696170807,0.09698500484228134},{0.0907096266746521,-0.2230609506368637,-0.09537306427955627,-0.1483340859413147,0.0012278310023248196,0.202352836728096,-0.21280816197395325},{-0.14262941479682922,-0.06964972615242004,-0.11452370136976242,-0.18888935446739197,0.0978122353553772,-0.12684470415115356,0.0487985797226429},{-0.11608096212148666,0.12257561087608337,0.11786792427301407,-0.06750475615262985,-0.0389060415327549,0.1690041422843933,-0.03297996148467064},{-0.03983582556247711,0.07090440392494202,0.3156076967716217,0.26652684807777405,0.2296179085969925,0.13373206555843353,0.16821874678134918},{-0.2265247255563736,0.23631764948368073,0.20560044050216675,0.09545090794563293,-0.1785583645105362,-0.2092384248971939,0.21895024180412292},{-0.024977263063192368,0.136057049036026,0.6639488339424133,0.3364616632461548,0.1792214959859848,-0.13991393148899078,0.12820912897586823}}};
		const float b_layer_2[7] = {-0.036468103528022766,0.5333436131477356,-0.17977944016456604,0.22215476632118225,0.08445034921169281,0.39556097984313965,-0.11505474895238876};

		// Fill with biases for layer_2
		for (int i = 0; i < 7; i++) {
			for (int l = 56; l < L; l++) {
				x_even[i][l] = b_layer_2[i];
			}
		}

		// Apply main filter for layer_2
		// x_even[:,56:] = sum(w[k]@x_odd[:,56-(1-k)*32:L-(1-k)*32] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*32;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 7, L-56, 7, 1.0, &w_layer_2[k][0][0], 7, &x_odd[0][56-offset], MAX_L, 1.0, &x_even[0][56], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 7; i++) {
			for (int l = 56; l < L; l++) {
				x_even[i][l] = x_even[i][l] > 0 ? x_even[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_3: Conv1d(7, 7, kernel_size=(2,), stride=(1,), dilation=(64,))
		const float w_layer_3[2][7][7] = {{{-0.1209917962551117,-0.16235950589179993,-0.09497777372598648,-0.13352659344673157,-0.25040292739868164,0.07277861982584,-0.15116068720817566},{-0.19661371409893036,-0.10241630673408508,-0.07586163282394409,0.03559637442231178,-0.21042203903198242,0.015798548236489296,-0.21909479796886444},{0.08958274871110916,-0.013884578831493855,-0.23367668688297272,0.41680431365966797,0.5474231243133545,-0.02623657137155533,0.06934485584497452},{-0.17790022492408752,0.018210066482424736,0.21616259217262268,0.0018440973944962025,0.114991694688797,-0.21289308369159698,-0.21689215302467346},{-0.24753062427043915,0.12250467389822006,-0.08957124501466751,0.015409923158586025,-0.05373137444257736,-0.31340402364730835,-0.16348567605018616},{0.08567658066749573,-0.2539997100830078,0.12099739164113998,-0.13727661967277527,0.11728578060865402,-0.08184318244457245,0.10151860117912292},{-0.010899052955210209,0.16074645519256592,-0.09511657804250717,0.08733212202787399,0.2425518035888672,0.24590441584587097,0.3883262574672699}},{{0.10827889293432236,-0.18354380130767822,-0.18539269268512726,0.19130158424377441,0.05010484531521797,-0.24096184968948364,-0.12309189885854721},{-0.11807529628276825,0.14145073294639587,0.11789387464523315,0.24182307720184326,0.15027596056461334,-0.1957976073026657,0.317600816488266},{0.4023854732513428,0.5035413503646851,-0.02254059910774231,-0.026302257552742958,0.3778805434703827,0.26382726430892944,-0.40442079305648804},{0.054201968014240265,0.01447929535061121,-0.11620273441076279,0.04659637063741684,-0.04694491624832153,0.12547099590301514,0.06159626692533493},{-0.024748675525188446,0.039381325244903564,-0.05487965792417526,0.5131941437721252,-0.168849915266037,-0.21265889704227448,0.16215039789676666},{0.02768472209572792,-0.18700288236141205,0.17462469637393951,-0.14189893007278442,0.07860410213470459,-0.1442958265542984,-0.02220563217997551},{-0.12384802103042603,0.2535252571105957,-0.15213604271411896,-0.030065298080444336,0.6652997732162476,-0.013082212768495083,0.10578709840774536}}};
		const float b_layer_3[7] = {-0.13109463453292847,-0.061958469450473785,0.2669897675514221,-0.2571282386779785,0.0639646053314209,-0.01830638013780117,-0.18204130232334137};

		// Fill with biases for layer_3
		for (int i = 0; i < 7; i++) {
			for (int l = 120; l < L; l++) {
				x_odd[i][l] = b_layer_3[i];
			}
		}

		// Apply main filter for layer_3
		// x_odd[:,120:] = sum(w[k]@x_even[:,120-(1-k)*64:L-(1-k)*64] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*64;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 7, L-120, 7, 1.0, &w_layer_3[k][0][0], 7, &x_even[0][120-offset], MAX_L, 1.0, &x_odd[0][120], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 7; i++) {
			for (int l = 120; l < L; l++) {
				x_odd[i][l] = x_odd[i][l] > 0 ? x_odd[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_4: Conv1d(7, 7, kernel_size=(2,), stride=(1,), dilation=(128,))
		const float w_layer_4[2][7][7] = {{{-0.09083577990531921,0.17961299419403076,-0.13965950906276703,-0.09334071725606918,0.057919349521398544,-0.1966780573129654,0.2868398129940033},{-0.09998016804456711,-0.25110191106796265,-0.06611233949661255,0.21906939148902893,-0.14470167458057404,0.17182157933712006,0.21202178299427032},{-0.09833641350269318,0.1540164053440094,0.212982639670372,-0.1671227514743805,0.3416100740432739,0.15152879059314728,-0.026661833748221397},{-0.04589236527681351,-0.1842186450958252,-0.01998891681432724,-0.23368726670742035,0.05019615590572357,-0.018929477781057358,0.011350199580192566},{-0.07451732456684113,-0.2880520820617676,-0.021726025268435478,0.10985817015171051,-0.26810553669929504,-0.22503192722797394,-0.24176782369613647},{0.14324553310871124,0.198309525847435,0.044238071888685226,-0.015741979703307152,0.2153088003396988,-0.014407076872885227,-0.16874423623085022},{-0.05236832797527313,-0.10747331380844116,0.1344498246908188,-0.17685799300670624,0.14799605309963226,0.021634794771671295,0.16919931769371033}},{{-0.015990490093827248,-0.09799736738204956,0.5042232871055603,0.17731113731861115,-0.4774003028869629,0.15371043980121613,0.3020036518573761},{0.19435745477676392,-0.03255532681941986,-0.22865068912506104,-0.06855322420597076,-0.09650786966085434,0.22816620767116547,0.06241203844547272},{0.22845691442489624,0.12577871978282928,-0.006186048034578562,0.13872548937797546,-0.05689038336277008,-0.12939772009849548,-0.20555813610553741},{0.0611458383500576,0.05785229429602623,-0.14421117305755615,0.08093397319316864,0.10590380430221558,0.16643700003623962,-0.1533702313899994},{-0.009072568267583847,-0.13195425271987915,0.18718314170837402,0.07070912420749664,-0.2499108612537384,0.02536461502313614,-0.0908365398645401},{0.12804754078388214,-0.0006173691945150495,0.07583539187908173,-0.08559929579496384,0.04011496528983116,0.0017510777106508613,0.17376959323883057},{-0.06007141247391701,0.3403368592262268,-0.21997104585170746,-0.02691148780286312,0.6014494299888611,0.2081139236688614,-0.006288012024015188}}};
		const float b_layer_4[7] = {0.10785236209630966,-0.10979155451059341,0.053100407123565674,-0.14131969213485718,0.0440395250916481,-0.00795431062579155,0.1669943779706955};

		// Fill with biases for layer_4
		for (int i = 0; i < 7; i++) {
			for (int l = 248; l < L; l++) {
				x_even[i][l] = b_layer_4[i];
			}
		}

		// Apply main filter for layer_4
		// x_even[:,248:] = sum(w[k]@x_odd[:,248-(1-k)*128:L-(1-k)*128] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*128;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 7, L-248, 7, 1.0, &w_layer_4[k][0][0], 7, &x_odd[0][248-offset], MAX_L, 1.0, &x_even[0][248], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 7; i++) {
			for (int l = 248; l < L; l++) {
				x_even[i][l] = x_even[i][l] > 0 ? x_even[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_5: Conv1d(7, 7, kernel_size=(2,), stride=(1,), dilation=(256,))
		const float w_layer_5[2][7][7] = {{{-0.010771620087325573,-0.14754244685173035,-0.1665191352367401,-0.2997994124889374,0.07794789969921112,-0.26033341884613037,0.12772336602210999},{-0.11115173250436783,-0.19199755787849426,-0.11336582899093628,0.02081884816288948,0.06035188212990761,-0.10630503296852112,-0.2358645349740982},{0.23670728504657745,-0.011108063161373138,-0.2647251486778259,-0.22256557643413544,0.0274918582290411,0.3291880488395691,0.15264751017093658},{-0.1875675469636917,0.08282054960727692,-0.0517301969230175,0.1267380267381668,-0.024602102115750313,0.12833397090435028,-0.25559985637664795},{0.14821302890777588,0.06359141319990158,0.2806796133518219,0.008356182835996151,0.002848198404535651,0.09660030156373978,0.051358211785554886},{0.09056201577186584,-0.08642110228538513,-0.26498913764953613,0.18776535987854004,-0.23350681364536285,0.3191206753253937,0.23083998262882233},{-0.2528698742389679,-0.19208285212516785,-0.12825195491313934,-0.17751945555210114,-0.2685564458370209,-0.18423190712928772,-0.13291707634925842}},{{0.11711201816797256,-0.20513492822647095,-0.040032148361206055,0.1298752874135971,-0.17576220631599426,-0.07295016199350357,-0.04886815324425697},{0.4058190882205963,0.16527588665485382,-0.054949965327978134,-0.11333830654621124,-0.0544104166328907,0.2588682174682617,-0.18752053380012512},{-0.2642531991004944,0.18981003761291504,0.1532553732395172,0.22388172149658203,0.1811855137348175,0.24285763502120972,0.2735752761363983},{0.026185953989624977,-0.04558323323726654,0.16211609542369843,-0.036925431340932846,-0.22452156245708466,0.15492665767669678,-0.02057824283838272},{0.21424268186092377,0.08909089118242264,0.005846141371876001,-0.19673919677734375,0.03133551776409149,0.22916020452976227,-0.21846503019332886},{-0.3672335147857666,0.16608193516731262,0.3816344738006592,0.21419255435466766,-0.2433745115995407,0.0011932548368349671,0.28159621357917786},{-0.30669113993644714,-0.021876027807593346,-0.19069306552410126,-0.07178030163049698,0.10666675120592117,-0.11877718567848206,0.13846026360988617}}};
		const float b_layer_5[7] = {-0.2075379192829132,0.2552492320537567,-0.15747901797294617,0.004259361419826746,0.16427627205848694,0.07009490579366684,0.1829717457294464};

		// Fill with biases for layer_5
		for (int i = 0; i < 7; i++) {
			for (int l = 504; l < L; l++) {
				x_odd[i][l] = b_layer_5[i];
			}
		}

		// Apply main filter for layer_5
		// x_odd[:,504:] = sum(w[k]@x_even[:,504-(1-k)*256:L-(1-k)*256] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*256;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 7, L-504, 7, 1.0, &w_layer_5[k][0][0], 7, &x_even[0][504-offset], MAX_L, 1.0, &x_odd[0][504], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 7; i++) {
			for (int l = 504; l < L; l++) {
				x_odd[i][l] = x_odd[i][l] > 0 ? x_odd[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_6: Conv1d(7, 1, kernel_size=(1,), stride=(1,))
		const float w_layer_6[1][1][7] = {{{-0.13049258291721344,0.31377291679382324,-0.3508884906768799,-0.2552582919597626,0.36648550629615784,-0.3888820707798004,-0.038842350244522095}}};
		const float b_layer_6[1] = {-0.08176816254854202};

		// Fill with biases for layer_6
		for (int i = 0; i < 1; i++) {
			for (int l = 504; l < L; l++) {
				x_even[i][l] = b_layer_6[i];
			}
		}

		// Apply main filter for layer_6
		// x_even[:,504:] = sum(w[k]@x_odd[:,504-(0-k)*1:L-(0-k)*1] for k in w.shape[0])
		for (int k = 0; k < 1; k++) {
			int offset = (0-k)*1;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 1, L-504, 7, 1.0, &w_layer_6[k][0][0], 7, &x_odd[0][504-offset], MAX_L, 1.0, &x_even[0][504], MAX_L);
		}


		// Copy result back to y
		for (int l = 504; l < L; l++) {
			y[l] = x_even[0][l];
		}
	}
};
