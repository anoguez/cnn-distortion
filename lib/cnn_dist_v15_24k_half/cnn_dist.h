
extern "C" {
#include <cblas.h>
};

#include <cmath>

struct cnn_dist_v15_24k {
	const static int latency = 94;
	const static int MAX_L = MAX_BUFFER + latency;
	// About 1.2e-05*(MAX_BUFFER+94) MB of buffer
	float x_even[6][MAX_L];
	float x_odd [6][MAX_L];

	void operator()(float* x, float* y, int L) {

		// Ensure we don't segfault
		L = L > MAX_L ? MAX_L : L;

		for (int i = 0; i < L; i++) {
			x_odd[0][i] = x[i];
		}

		// auto-generated code for layer layer_0: Conv1d(1, 4, kernel_size=(2,), stride=(1,), dilation=(64,), bias=False)
		const float w_layer_0[2][4][1] = {{{0.5399524569511414},{-1.385377287864685},{-0.8901036977767944},{-0.09110625833272934}},{{0.40864282846450806},{0.00449051009491086},{0.003735300851985812},{0.3332225978374481}}};

		// Apply main filter for layer_0
		// x_even[:,32:] = sum(w[k]@x_odd[:,32-(1-k)*32:L-(1-k)*32] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*32;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-32, 1, 1.0, &w_layer_0[k][0][0], 1, &x_odd[0][32-offset], MAX_L, k==0?0.0:1.0, &x_even[0][32], MAX_L);
		}


		// auto-generated code for layer layer_1: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(32,), bias=False)
		const float w_layer_1[2][4][4] = {{{-0.3997573256492615,0.39332449436187744,0.44539910554885864,-0.30871015787124634},{0.26750972867012024,0.2880374789237976,-0.05958641692996025,0.16481135785579681},{-0.011003407649695873,-0.17057795822620392,0.1438400149345398,0.33657342195510864},{0.04978199675679207,0.10384044796228409,0.1027437075972557,-0.41384175419807434}},{{-0.030801400542259216,0.0076433103531599045,0.020687084645032883,-0.2467777580022812},{0.4109293222427368,-0.6221405863761902,-0.3798847198486328,0.06913526356220245},{-0.11202814429998398,0.9555467367172241,1.035541296005249,-0.03589987754821777},{-0.21213595569133759,0.993722140789032,0.8539409637451172,0.5919800400733948}}};

		// Apply main filter for layer_1
		// x_odd[:,48:] = sum(w[k]@x_even[:,48-(1-k)*16:L-(1-k)*16] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*16;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-48, 4, 1.0, &w_layer_1[k][0][0], 4, &x_even[0][48-offset], MAX_L, k==0?0.0:1.0, &x_odd[0][48], MAX_L);
		}


		// auto-generated code for layer layer_2: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(16,), bias=False)
		const float w_layer_2[2][4][4] = {{{-0.034150801599025726,0.33132651448249817,-0.08439359813928604,-0.5092565417289734},{-0.08429278433322906,0.22447502613067627,0.0919976532459259,-0.532493531703949},{-0.21487560868263245,-0.36746084690093994,-0.2825271189212799,0.23548927903175354},{-0.08071622997522354,0.4457886815071106,-0.7653844952583313,-0.3709326684474945}},{{-0.24869588017463684,-0.2677190601825714,0.5586430430412292,0.6951454877853394},{-0.33330243825912476,-0.40270712971687317,0.4402615427970886,0.276938259601593},{0.0004061023937538266,-0.6217037439346313,0.9457769393920898,0.79597407579422},{-0.5057461857795715,-0.09780321270227432,-0.41111981868743896,-0.15929971635341644}}};

		// Apply main filter for layer_2
		// x_even[:,56:] = sum(w[k]@x_odd[:,56-(1-k)*8:L-(1-k)*8] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*8;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-56, 4, 1.0, &w_layer_2[k][0][0], 4, &x_odd[0][56-offset], MAX_L, k==0?0.0:1.0, &x_even[0][56], MAX_L);
		}


		// auto-generated code for layer layer_3: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(8,), bias=False)
		const float w_layer_3[2][4][4] = {{{0.3391532301902771,-0.23995773494243622,0.3790639042854309,-0.1552177518606186},{-0.11120941489934921,-0.1485995650291443,-0.01471967063844204,-0.4910556674003601},{-0.30241650342941284,0.02275969088077545,-0.457587331533432,0.328276127576828},{-0.13455335795879364,-0.12947480380535126,-0.5477213263511658,0.6881321668624878}},{{-0.869685709476471,-0.7095736861228943,-0.44389164447784424,0.17022237181663513},{-0.42525365948677063,-0.5684396624565125,-0.281045138835907,-0.04729454591870308},{0.6807850003242493,0.36107930541038513,0.29387906193733215,-0.23293019831180573},{0.2997756898403168,0.31911754608154297,-0.3237794041633606,0.9814143180847168}}};

		// Apply main filter for layer_3
		// x_odd[:,60:] = sum(w[k]@x_even[:,60-(1-k)*4:L-(1-k)*4] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*4;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-60, 4, 1.0, &w_layer_3[k][0][0], 4, &x_even[0][60-offset], MAX_L, k==0?0.0:1.0, &x_odd[0][60], MAX_L);
		}


		// auto-generated code for layer layer_4: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(4,), bias=False)
		const float w_layer_4[2][4][4] = {{{-0.677727997303009,-0.24408400058746338,0.36326363682746887,-0.03323310986161232},{0.6188647150993347,0.3013775944709778,-0.8162880539894104,0.12885694205760956},{0.7402735352516174,0.6632049083709717,-0.3938307762145996,0.38663288950920105},{-0.690406322479248,-0.13396234810352325,0.17787311971187592,-0.2883853018283844}},{{0.02662459760904312,0.26497572660446167,0.25094571709632874,0.6858835220336914},{0.104303739964962,0.026671024039387703,-0.2356116771697998,-0.41997987031936646},{-0.3208940029144287,0.4398675858974457,0.34476226568222046,-0.10846561938524246},{0.1998044103384018,0.07187794893980026,0.13002054393291473,0.3904566168785095}}};

		// Apply main filter for layer_4
		// x_even[:,62:] = sum(w[k]@x_odd[:,62-(1-k)*2:L-(1-k)*2] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*2;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-62, 4, 1.0, &w_layer_4[k][0][0], 4, &x_odd[0][62-offset], MAX_L, k==0?0.0:1.0, &x_even[0][62], MAX_L);
		}


		// auto-generated code for layer layer_5: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(2,), bias=False)
		const float w_layer_5[2][4][4] = {{{0.20422762632369995,0.24465076625347137,0.8872942924499512,0.0050445422530174255},{0.3012429177761078,-0.43501150608062744,-0.15761679410934448,0.7412135601043701},{0.6937689781188965,-0.4288407564163208,-0.1831875592470169,0.38252556324005127},{-0.8881441354751587,0.6169768571853638,0.6544442772865295,-0.7712984681129456}},{{0.3245306611061096,-0.44028016924858093,0.6629779934883118,0.017111655324697495},{0.13740403950214386,0.13703560829162598,-0.2145562320947647,-0.35998472571372986},{-0.21991410851478577,-0.30521053075790405,0.04037564620375633,0.12158113718032837},{-0.10067355632781982,0.18873243033885956,0.40554454922676086,0.08842705190181732}}};

		// Apply main filter for layer_5
		// x_odd[:,63:] = sum(w[k]@x_even[:,63-(1-k)*1:L-(1-k)*1] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*1;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-63, 4, 1.0, &w_layer_5[k][0][0], 4, &x_even[0][63-offset], MAX_L, k==0?0.0:1.0, &x_odd[0][63], MAX_L);
		}


		// auto-generated code for layer layer_6: Conv1d(4, 6, kernel_size=(1,), stride=(1,))
		const float w_layer_6[1][6][4] = {{{0.37053823471069336,-0.15250352025032043,-0.38241368532180786,0.9465027451515198},{0.9886977076530457,0.22390717267990112,0.2366468608379364,-0.2110033482313156},{0.29072296619415283,0.02297687716782093,0.5433012247085571,-0.09960722178220749},{0.1504671424627304,0.37513458728790283,0.36942338943481445,0.3292316198348999},{0.6180334687232971,-0.53509521484375,-0.05564114451408386,0.27043041586875916},{0.09393604099750519,-0.5027270317077637,-0.5712760090827942,0.5334956645965576}}};
		const float b_layer_6[6] = {0.5397877097129822,0.1588917076587677,0.060905300080776215,-0.4239009916782379,-0.1884220987558365,0.35232722759246826};

		// Fill with biases for layer_6
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_even[i][l] = b_layer_6[i];
			}
		}

		// Apply main filter for layer_6
		// x_even[:,63:] = sum(w[k]@x_odd[:,63-(0-k)*0:L-(0-k)*0] for k in w.shape[0])
		for (int k = 0; k < 1; k++) {
			int offset = (0-k)*0;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 6, L-63, 4, 1.0, &w_layer_6[k][0][0], 4, &x_odd[0][63-offset], MAX_L, 1.0, &x_even[0][63], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_even[i][l] = x_even[i][l] > 0 ? x_even[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_7: Conv1d(6, 6, kernel_size=(1,), stride=(1,))
		const float w_layer_7[1][6][6] = {{{-0.1238575279712677,-0.05607712268829346,-0.0032281875610351562,-0.3500618040561676,0.08098781108856201,-0.00010755658149719238},{0.5906929969787598,-0.40201160311698914,-0.05333413556218147,0.4282114803791046,-0.1648695319890976,0.467037558555603},{-0.08014974743127823,-0.21405792236328125,-0.5020577311515808,0.01806110329926014,0.13599157333374023,0.3179927468299866},{-0.2341763824224472,0.4361758828163147,0.024019259959459305,0.01306901779025793,-0.08713221549987793,-0.3891300857067108},{0.04365293309092522,-0.21990114450454712,-0.19679072499275208,-0.05393514037132263,0.24249817430973053,-0.27335402369499207},{0.5950714945793152,-0.2618236541748047,-0.5003747344017029,-0.048384889960289,-0.6013351082801819,0.18564511835575104}}};
		const float b_layer_7[6] = {-0.2983643710613251,0.0026992924977093935,-0.2319241762161255,0.49083411693573,-0.22559373080730438,0.1956980675458908};

		// Fill with biases for layer_7
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_odd[i][l] = b_layer_7[i];
			}
		}

		// Apply main filter for layer_7
		// x_odd[:,63:] = sum(w[k]@x_even[:,63-(0-k)*0:L-(0-k)*0] for k in w.shape[0])
		for (int k = 0; k < 1; k++) {
			int offset = (0-k)*0;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 6, L-63, 6, 1.0, &w_layer_7[k][0][0], 6, &x_even[0][63-offset], MAX_L, 1.0, &x_odd[0][63], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_odd[i][l] = x_odd[i][l] > 0 ? x_odd[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_8: Conv1d(6, 6, kernel_size=(1,), stride=(1,))
		const float w_layer_8[1][6][6] = {{{0.08206981420516968,-0.1568557322025299,0.2562684118747711,0.40183472633361816,0.265874445438385,-0.42657119035720825},{0.13737529516220093,0.48873114585876465,-0.4217531383037567,-0.30126163363456726,0.2825167775154114,0.3349618911743164},{0.04438561201095581,-0.14924456179141998,-0.15533629059791565,0.052922818809747696,-0.27293768525123596,-0.4373261332511902},{0.11476713418960571,-0.009119256399571896,-0.3081241250038147,0.03424086421728134,-0.26463210582733154,-0.27873608469963074},{0.18025773763656616,-0.5471044778823853,0.2756696045398712,-0.303742378950119,-0.13862445950508118,0.12407451868057251},{0.335435152053833,0.02218492329120636,0.04140231013298035,-0.21740031242370605,0.13722050189971924,-0.21415145695209503}}};
		const float b_layer_8[6] = {0.5614158511161804,0.302742600440979,0.23977337777614594,-0.33955466747283936,0.20196419954299927,-0.2925117015838623};

		// Fill with biases for layer_8
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_even[i][l] = b_layer_8[i];
			}
		}

		// Apply main filter for layer_8
		// x_even[:,63:] = sum(w[k]@x_odd[:,63-(0-k)*0:L-(0-k)*0] for k in w.shape[0])
		for (int k = 0; k < 1; k++) {
			int offset = (0-k)*0;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 6, L-63, 6, 1.0, &w_layer_8[k][0][0], 6, &x_odd[0][63-offset], MAX_L, 1.0, &x_even[0][63], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_even[i][l] = x_even[i][l] > 0 ? x_even[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_9: Conv1d(6, 6, kernel_size=(1,), stride=(1,))
		const float w_layer_9[1][6][6] = {{{0.32445576786994934,-0.45276302099227905,-0.04534716531634331,-0.19381120800971985,-0.1580561399459839,0.0963737964630127},{-0.2523252069950104,-0.16663402318954468,-0.32171371579170227,-0.31318384408950806,-0.06467321515083313,0.37745434045791626},{0.4787856638431549,-0.6352631449699402,0.5711469650268555,-0.21276350319385529,-0.055852118879556656,0.10156655311584473},{0.10140549391508102,-0.27434712648391724,-0.34617021679878235,-0.005401167087256908,-0.3213014006614685,-0.36802244186401367},{-0.28583234548568726,0.44707876443862915,-0.014114626683294773,0.20126324892044067,-0.2310052514076233,-0.442536860704422},{-0.3087600767612457,0.43189507722854614,0.027774814516305923,-0.48382502794265747,-0.05843208357691765,-0.40557387471199036}}};
		const float b_layer_9[6] = {0.5906748175621033,0.14842887222766876,-0.06433107703924179,-0.4149148166179657,-0.02636520378291607,0.24356521666049957};

		// Fill with biases for layer_9
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_odd[i][l] = b_layer_9[i];
			}
		}

		// Apply main filter for layer_9
		// x_odd[:,63:] = sum(w[k]@x_even[:,63-(0-k)*0:L-(0-k)*0] for k in w.shape[0])
		for (int k = 0; k < 1; k++) {
			int offset = (0-k)*0;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 6, L-63, 6, 1.0, &w_layer_9[k][0][0], 6, &x_even[0][63-offset], MAX_L, 1.0, &x_odd[0][63], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_odd[i][l] = x_odd[i][l] > 0 ? x_odd[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_10: Conv1d(6, 6, kernel_size=(1,), stride=(1,))
		const float w_layer_10[1][6][6] = {{{-0.10522564500570297,-0.42534154653549194,-0.27122431993484497,-0.15507614612579346,0.33517780900001526,0.021615011617541313},{0.40058255195617676,-0.21313273906707764,0.4120785593986511,0.18480736017227173,-0.31431975960731506,-0.32772043347358704},{-0.25078025460243225,-0.03737498074769974,-0.320860892534256,0.09691727161407471,0.1855952888727188,0.20331668853759766},{-0.3053929805755615,-0.1959192007780075,-0.1982492357492447,-0.24932026863098145,0.1771581619977951,0.28983446955680847},{-0.0017685474595054984,0.05331599712371826,-0.009072838351130486,-0.3675335645675659,0.056319981813430786,-0.302278608083725},{-0.32830810546875,0.16304361820220947,-0.03790292143821716,-0.18981382250785828,-0.25188589096069336,-0.000837862491607666}}};
		const float b_layer_10[6] = {0.09931652247905731,0.5409981608390808,-0.489603728055954,0.30729568004608154,-0.10176995396614075,-0.39176639914512634};

		// Fill with biases for layer_10
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_even[i][l] = b_layer_10[i];
			}
		}

		// Apply main filter for layer_10
		// x_even[:,63:] = sum(w[k]@x_odd[:,63-(0-k)*0:L-(0-k)*0] for k in w.shape[0])
		for (int k = 0; k < 1; k++) {
			int offset = (0-k)*0;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 6, L-63, 6, 1.0, &w_layer_10[k][0][0], 6, &x_odd[0][63-offset], MAX_L, 1.0, &x_even[0][63], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_even[i][l] = x_even[i][l] > 0 ? x_even[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_11: Conv1d(6, 6, kernel_size=(1,), stride=(1,))
		const float w_layer_11[1][6][6] = {{{0.30528074502944946,-0.6406227350234985,-0.1601153314113617,0.05743879824876785,0.03134724125266075,-0.3543972969055176},{0.4584113657474518,0.09618356823921204,0.12604142725467682,0.09868690371513367,0.22218376398086548,0.22959190607070923},{-0.07844918966293335,0.45724478363990784,-0.2642945647239685,-0.46493279933929443,0.4247572124004364,0.32227373123168945},{0.1405644565820694,-0.11350636184215546,0.09196943044662476,0.21850581467151642,0.2436937838792801,0.13944441080093384},{0.1308579444885254,0.45083609223365784,-0.36767011880874634,-0.8119479417800903,-0.07410311698913574,-0.20780619978904724},{0.012889891862869263,0.0948265865445137,-0.24239231646060944,-0.3524076044559479,-0.0866149365901947,0.25237607955932617}}};
		const float b_layer_11[6] = {0.41147059202194214,-0.25860053300857544,0.288161039352417,0.3215232491493225,-0.2974637448787689,-0.27477338910102844};

		// Fill with biases for layer_11
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_odd[i][l] = b_layer_11[i];
			}
		}

		// Apply main filter for layer_11
		// x_odd[:,63:] = sum(w[k]@x_even[:,63-(0-k)*0:L-(0-k)*0] for k in w.shape[0])
		for (int k = 0; k < 1; k++) {
			int offset = (0-k)*0;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 6, L-63, 6, 1.0, &w_layer_11[k][0][0], 6, &x_even[0][63-offset], MAX_L, 1.0, &x_odd[0][63], MAX_L);
		}


		// Rectified Linear Unit (ReLU)
		for (int i = 0; i < 6; i++) {
			for (int l = 63; l < L; l++) {
				x_odd[i][l] = x_odd[i][l] > 0 ? x_odd[i][l] : 0;
			}
		}


		// auto-generated code for layer layer_12: Conv1d(6, 4, kernel_size=(1,), stride=(1,))
		const float w_layer_12[1][4][6] = {{{-0.13348843157291412,-0.10900083184242249,-0.569930911064148,0.2673102617263794,-0.0008525063749402761,0.003913697320967913},{0.7037344574928284,-0.4594273865222931,-0.6038959622383118,0.2938232719898224,0.08382292091846466,-0.11283458024263382},{-0.04833480343222618,0.22953976690769196,0.08228930830955505,-0.1633354276418686,-1.1575113534927368,0.27294492721557617},{0.43244874477386475,-0.23989145457744598,-0.16474483907222748,0.3611835539340973,-0.08131906390190125,-0.02489909715950489}}};
		const float b_layer_12[4] = {0.07572034746408463,0.01755532994866371,0.19627514481544495,-0.10314544290304184};

		// Fill with biases for layer_12
		for (int i = 0; i < 4; i++) {
			for (int l = 63; l < L; l++) {
				x_even[i][l] = b_layer_12[i];
			}
		}

		// Apply main filter for layer_12
		// x_even[:,63:] = sum(w[k]@x_odd[:,63-(0-k)*0:L-(0-k)*0] for k in w.shape[0])
		for (int k = 0; k < 1; k++) {
			int offset = (0-k)*0;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-63, 6, 1.0, &w_layer_12[k][0][0], 6, &x_odd[0][63-offset], MAX_L, 1.0, &x_even[0][63], MAX_L);
		}


		// auto-generated code for layer layer_13: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(32,), bias=False)
		const float w_layer_13[2][4][4] = {{{-0.06449847668409348,0.22198374569416046,-0.1432199627161026,0.1297549307346344},{0.16851291060447693,0.13160556554794312,0.1535167694091797,-0.01596003770828247},{-0.17067496478557587,-0.22835835814476013,-0.14183126389980316,-0.28928321599960327},{-0.4364164173603058,-0.1387639194726944,-0.2667946219444275,-0.46396714448928833}},{{-0.17935624718666077,-0.2731397747993469,0.00651088822633028,-0.38663366436958313},{-0.010912613943219185,-0.5786343216896057,0.20809157192707062,-0.38210028409957886},{-0.17167046666145325,-0.09410690516233444,0.06856977194547653,0.17807967960834503},{-0.3469616174697876,-0.17671090364456177,0.05202110856771469,0.12874345481395721}}};

		// Apply main filter for layer_13
		// x_odd[:,79:] = sum(w[k]@x_even[:,79-(1-k)*16:L-(1-k)*16] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*16;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-79, 4, 1.0, &w_layer_13[k][0][0], 4, &x_even[0][79-offset], MAX_L, k==0?0.0:1.0, &x_odd[0][79], MAX_L);
		}


		// auto-generated code for layer layer_14: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(16,), bias=False)
		const float w_layer_14[2][4][4] = {{{-0.28454264998435974,-0.07183089107275009,0.08225595951080322,-0.23195752501487732},{0.1134067177772522,0.2641279101371765,0.2741486728191376,0.1353585422039032},{-0.19880464673042297,0.020829791203141212,-0.31166326999664307,0.20128872990608215},{-0.2957989275455475,-0.07507774978876114,-0.20153087377548218,-0.19305846095085144}},{{-0.15312537550926208,-0.627417266368866,0.13076454401016235,-0.32284975051879883},{-0.3361402153968811,0.07882753014564514,-0.044735897332429886,0.48446375131607056},{0.24030211567878723,0.4744246006011963,0.3079724609851837,0.17225594818592072},{0.23853754997253418,0.3865027129650116,-0.18614278733730316,-0.16561058163642883}}};

		// Apply main filter for layer_14
		// x_even[:,87:] = sum(w[k]@x_odd[:,87-(1-k)*8:L-(1-k)*8] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*8;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-87, 4, 1.0, &w_layer_14[k][0][0], 4, &x_odd[0][87-offset], MAX_L, k==0?0.0:1.0, &x_even[0][87], MAX_L);
		}


		// auto-generated code for layer layer_15: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(8,), bias=False)
		const float w_layer_15[2][4][4] = {{{0.3745451271533966,-0.31746917963027954,-0.05103299394249916,-0.018157226964831352},{-0.043274886906147,0.13808128237724304,-0.22871676087379456,0.09618384391069412},{-0.08807631582021713,0.2986098825931549,-0.09666825085878372,-0.19324642419815063},{-0.03710000962018967,-0.1568434089422226,-0.1472577154636383,0.1168687492609024}},{{-0.171304851770401,-0.2278863936662674,0.03082086704671383,0.10456317663192749},{-0.3998858630657196,0.2651834487915039,0.4789341688156128,0.45173588395118713},{0.19602297246456146,0.2666133642196655,-0.19136883318424225,-0.3868017792701721},{0.2709890604019165,-0.16072680056095123,-0.8612464070320129,-0.0618736632168293}}};

		// Apply main filter for layer_15
		// x_odd[:,91:] = sum(w[k]@x_even[:,91-(1-k)*4:L-(1-k)*4] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*4;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-91, 4, 1.0, &w_layer_15[k][0][0], 4, &x_even[0][91-offset], MAX_L, k==0?0.0:1.0, &x_odd[0][91], MAX_L);
		}


		// auto-generated code for layer layer_16: Conv1d(4, 4, kernel_size=(2,), stride=(1,), dilation=(4,), bias=False)
		const float w_layer_16[2][4][4] = {{{-0.10644050687551498,-0.012645511887967587,0.04417325556278229,0.40207359194755554},{0.20625965297222137,-0.21980994939804077,-0.024008089676499367,0.2487383335828781},{0.03299444913864136,-0.05850065499544144,-0.12875564396381378,0.5274162292480469},{-0.03714202344417572,-0.3463785946369171,-0.09097878634929657,0.028383009135723114}},{{0.49198436737060547,-0.3679409325122833,0.24729612469673157,0.32284244894981384},{0.07628455013036728,0.2580227255821228,-0.15352706611156464,-0.20240217447280884},{0.11058740317821503,0.49283501505851746,-0.24747200310230255,0.22324493527412415},{0.2569493353366852,0.4993475675582886,-0.3208557665348053,-0.3385959267616272}}};

		// Apply main filter for layer_16
		// x_even[:,93:] = sum(w[k]@x_odd[:,93-(1-k)*2:L-(1-k)*2] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*2;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 4, L-93, 4, 1.0, &w_layer_16[k][0][0], 4, &x_odd[0][93-offset], MAX_L, k==0?0.0:1.0, &x_even[0][93], MAX_L);
		}


		// auto-generated code for layer layer_17: Conv1d(4, 1, kernel_size=(2,), stride=(1,), dilation=(2,), bias=False)
		const float w_layer_17[2][1][4] = {{{0.19099120795726776,-0.2900965213775635,-0.04102525860071182,-0.4581625461578369}},{{-0.18992361426353455,-0.14649994671344757,-0.1334533393383026,0.011194397695362568}}};

		// Apply main filter for layer_17
		// x_odd[:,94:] = sum(w[k]@x_even[:,94-(1-k)*1:L-(1-k)*1] for k in w.shape[0])
		for (int k = 0; k < 2; k++) {
			int offset = (1-k)*1;
			cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, 1, L-94, 4, 1.0, &w_layer_17[k][0][0], 4, &x_even[0][94-offset], MAX_L, k==0?0.0:1.0, &x_odd[0][94], MAX_L);
		}


		// Copy result back to y
		for (int l = 94; l < L; l++) {
			y[l] = x_odd[0][l];
		}
	}
};
